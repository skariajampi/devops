One alternative would be install SDKMan as a shared component

export SDKMAN_DIR="/usr/local/sdkman" && curl -s "https://get.sdkman.io" | bash

Then install shared SDK component, i.e. gradle

sdk install gradle 4.10.2

Then for each user you want access to this 'shared' SDKs, just edit .bashrc or .profile file on the home path of those user and append these lines

export SDKMAN_DIR="/usr/local/sdkman"
[[ -s "/usr/local/sdkman/bin/sdkman-init.sh" ]] && source "/usr/local/sdkman/bin/sdkman-init.sh"

==============================================================================

sudo yum install java-17-amazon-corretto-headless

==============================================================================
maven: wget https://maven distribution.tar.gz

tar -xvf ...
export PATH=$PATH:/opt/apachemaven/bin/sdkman-init

==============================================================================

sonar :  wget sonar binaries.zip
unzip
sonar token: squ_ca3f33b4e93d47e8eaf62101922f0e7b3d9646d2
before starting sonarqube docker instance

sysctl -w vm.max_map_count=262144
sudo nano /etc/sysctl.conf
sudo sysctl -p

==========================================================================
chown ubuntu:ubuntu dir_name -R
netstat -plunt |grrp -i :8081
ps axu |grep -i java

sudo hostnamectl set-hostname newNameHere
 
============================================================================

NEXUS:
===================================
admin/Password123

docker run -d -p 10001:10001 -p 10002:10002 -v /home/skaria/docker/my-nexus-data:/nexus-data --name my-nexus sonatype/nexus3:3.0.0

docker run -p 10001:10001 -p 10002:10002 -v /home/skaria/docker/my-nexus-data:/nexus-data --name my-nexus sonatype/nexus3:3.0.0

docker login -u admin -p Password123 localhost:10002

/etc/docker/daemon.json 
{
  "insecure-registries": [ "http://localhost:10002"]
}

docker-private: http connector port 8082
version: "3.5"
services:
  nexus:
    image: sonatype/nexus3
    volumes:
      - ~/docker/nexus/my-nexus-data:/nexus-data
    ports:
      - "10001:8081"
      - "10002:8082"
      - "10003:8083"
	  
	  docker tag your-own-image:1 localhost:10002/your-own-image:1
docker push localhost:10002/your-own-image:1

=====================================================================================================
JENKINS
==================
location of jenkins dir on the agent: /home/jenkins/agent
location of java on the agent:
 /opt/java/openjdk/bin/java
 
 generate ssh key using: ssh-keygen -t ed25519 -f jenkins_agent
 
 ===========================================================================
 
 https://qaautomation.expert/2023/02/01/how-to-create-jenkins-pipeline-for-gradle-project/
 =============================================================
 docker issue:
sudo aa-remove-unknown

============================================================================

JENKINS-SONARQUBE:

Inside Sonarqube->Administration->Webhooks->
name of the webhook->
url->jenkins-sonar-webhook	http://192.168.1.30:8080/sonarqube-webhook/

Inside Jenkins->Manage Jenkins-Systems->Sonarqube servers->
Name:sonarqube-community
url: http://localhost:9000
token name: jenkins-sonar-token
========================================================================

plugins required in Jenkins:
docker
docker pipeline
sonar
git
gradle
cloudbees
======================================================
JENKINS-DOCKER:
sudo usermod -a -G docker jenkins and restart machine, otherwise it will give permission error

docker pull repository/docker-private/configservice:21

to remove docker from maching:
https://www.golinuxcloud.com/ubuntu-uninstall-docker/
https://phoenixnap.com/kb/docker-permission-denied
https://qiita.com/leechungkyu/items/86cad0396cf95b3b6973
==============================================================================

EKS:
==========

eksctl create cluster --name configservice_eks_cluster  \
--region eu-west-2 \
--node-type t2.medium \
--nodes-min 2 \
--nodes-max 2 \
--zones <AZ-1>,<AZ-2>

eksctl create cluster --name configservice-eks-cluster  \
--region eu-west-2 \
--node-type t2.medium \
--nodes-min 2 \
--nodes-max 2

eksctl delete cluster configservice-eks-cluster --region eu-west-2

eksctl utils describe-stacks --region=eu-west-2 --cluster=configservice-eks-cluster'

enable cloudwatch logs with
eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=eu-west-2 --cluster=configservice-eks-cluster

https://blog.gitguardian.com/how-to-handle-secrets-in-kubernetes/
https://aws.amazon.com/blogs/security/how-to-use-aws-secrets-configuration-provider-with-kubernetes-secrets-store-csi-driver/
https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/
https://www.tutorialworks.com/spring-boot-kubernetes-override-properties/
https://www.mirantis.com/blog/cloud-native-5-minutes-at-a-time-using-kubernetes-secrets-with-environment-variables-and-volume-mounts/
==========================================================

accessing Spring boot app:
NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)          AGE
configservice-service   LoadBalancer   10.100.144.151   ab15eeaa81e474561a34357661e4aaa0-1079134627.eu-west-2.elb.amazonaws.com   8080:32751/TCP   25m
kubernetes              ClusterIP      10.100.0.1       <none>                                                                    443/TCP          44m

http://external-ip of service:8080/configservice/actuator

http://ab15eeaa81e474561a34357661e4aaa0-1079134627.eu-west-2.elb.amazonaws.com:8080/configservice/actuator
http://ab15eeaa81e474561a34357661e4aaa0-1079134627.eu-west-2.elb.amazonaws.com:8080/configservice/actuator
OR

http://public iof ec2 instance:32751/configservice/actuator
http://18.130.221.95:32751/configservice/actuator